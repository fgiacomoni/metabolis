% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/allGenerics.R, R/metRead-Write.R
\docType{methods}
\name{metWrite}
\alias{metWrite}
\alias{metWrite,MultiDataSet-method}
\alias{metWrite,ExpressionSet-method}
\title{Exporting a MultiDataSet instance into dataset subfolders,
each containing the 3 tabulated files 'dataMatrix.tsv',
'sampleMetadata.tsv', 'variableMetadata.tsv'}
\usage{
metWrite(x, ...)

\S4method{metWrite}{MultiDataSet}(x, dirC, filesLs = NULL,
  overwriteL = FALSE, info.txtC = NA)

\S4method{metWrite}{ExpressionSet}(x, dirC, dataMatrix.tsvC = NA,
  sampleMetadata.tsvC = NA, variableMetadata.tsvC = NA,
  overwriteL = FALSE, info.txtC = NA)
}
\arguments{
\item{x}{An S4 object of class \code{MultiDataSet}}

\item{dirC}{Character: directory where each dataset subfolder should be created}

\item{overwriteL}{Logical: should existing files be overwritten?}

\item{info.txtC}{Character: File name for the printed results (call to
'sink()'); if NA (default), messages will be printed on the screen; if NULL,
no verbose will be generated}

\item{dataMatrix.tsvC}{Character: alternatively, the FULL name of the dataMatrix, sampleMetadata, and variableMetadata files can be specified here and in the following two arguments (in that case, the dirC argument must be set to NA); note that if the sampleMetadata and/or variableMetadata file names are left to NA, the corresponding phenoData and featureData slots will be empty in the output ExpressionSet.}

\item{sampleMetadata.tsvC}{Character: full name of the sampleMetadata file (when dirC is set to NA)}

\item{variableMetadata.tsvC}{Character: full name of the variableMetadata file (when dirC is set to NA)}

\item{fileLs}{List: alternatively to the dirC argument, the full names of the files can be provided as a list}

\item{x}{An S4 object of class \code{ExpressionSet}}

\item{dirC}{Character: directory where each dataset should be written}

\item{overwriteL}{Logical: should existing files be overwritten?}

\item{info.txtC}{Character: File name for the printed results (call to
'sink()'); if NA (default), messages will be printed on the screen; if NULL,
no verbose will be generated}
}
\value{
No object returned.

No object returned.
}
\description{
Note that the \code{dataMatrix} is transposed before
export (e.g., the samples are written column wise in the 'dataMatrix.tsv'
exported file).

Note that the \code{dataMatrix} is transposed before
export (e.g., the samples are written column wise in the 'dataMatrix.tsv'
exported file).
}
\examples{
prometMset <- metRead(system.file("extdata/promet",package="metabolis"))
\dontrun{
metWrite(prometMset, dirC = file.path(getwd(), "promet"))
# alternatively
metWrite(prometMset,
         dirC = NA,
         filesLs = list(metabo = list(dataMatrix.tsvC = file.path(getwd(), "met_dataMatrix.tsv"),
                                      sampleMetadata.tsvC = file.path(getwd(), "met_sampleMetadata.tsv"),
                                      variableMetadata.tsvC = file.path(getwd(), "met_variableMetadata.tsv")),
                        proteo = list(dataMatrix.tsvC = file.path(getwd(), "pro_dataMatrix.tsv"),
                                      sampleMetadata.tsvC = file.path(getwd(), "pro_sampleMetadata.tsv"),
                                      variableMetadata.tsvC = file.path(getwd(), "pro_variableMetadata.tsv"))))
}

metSet <- metabolis::metRead(system.file("extdata/promet/metabo", package="metabolis"))
\dontrun{
metWrite(metSet, dirC = file.path(getwd(), "metabo"))
}
}
\author{
Etienne Thevenot, \email{etienne.thevenot@cea.fr}

Etienne Thevenot, \email{etienne.thevenot@cea.fr}
}
